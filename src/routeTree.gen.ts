/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as blankRouteRouteImport } from './routes/(blank)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedTransactionIndexRouteImport } from './routes/_authenticated/transaction/index'
import { Route as AuthenticatedTopupIndexRouteImport } from './routes/_authenticated/topup/index'
import { Route as AuthenticatedPaymentIndexRouteImport } from './routes/_authenticated/payment/index'
import { Route as AuthenticatedListrikIndexRouteImport } from './routes/_authenticated/listrik/index'
import { Route as blankAkunIndexRouteImport } from './routes/(blank)/akun/index'
import { Route as authRegisterIndexRouteImport } from './routes/(auth)/register/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'

const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const blankRouteRoute = blankRouteRouteImport.update({
  id: '/(blank)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedTransactionIndexRoute =
  AuthenticatedTransactionIndexRouteImport.update({
    id: '/transaction/',
    path: '/transaction/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedTopupIndexRoute = AuthenticatedTopupIndexRouteImport.update({
  id: '/topup/',
  path: '/topup/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedPaymentIndexRoute =
  AuthenticatedPaymentIndexRouteImport.update({
    id: '/payment/',
    path: '/payment/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedListrikIndexRoute =
  AuthenticatedListrikIndexRouteImport.update({
    id: '/listrik/',
    path: '/listrik/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const blankAkunIndexRoute = blankAkunIndexRouteImport.update({
  id: '/akun/',
  path: '/akun/',
  getParentRoute: () => blankRouteRoute,
} as any)
const authRegisterIndexRoute = authRegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => authRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof AuthenticatedIndexRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/akun': typeof blankAkunIndexRoute
  '/listrik': typeof AuthenticatedListrikIndexRoute
  '/payment': typeof AuthenticatedPaymentIndexRoute
  '/topup': typeof AuthenticatedTopupIndexRoute
  '/transaction': typeof AuthenticatedTransactionIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof AuthenticatedIndexRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/akun': typeof blankAkunIndexRoute
  '/listrik': typeof AuthenticatedListrikIndexRoute
  '/payment': typeof AuthenticatedPaymentIndexRoute
  '/topup': typeof AuthenticatedTopupIndexRoute
  '/transaction': typeof AuthenticatedTransactionIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/(blank)': typeof blankRouteRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(auth)/register/': typeof authRegisterIndexRoute
  '/(blank)/akun/': typeof blankAkunIndexRoute
  '/_authenticated/listrik/': typeof AuthenticatedListrikIndexRoute
  '/_authenticated/payment/': typeof AuthenticatedPaymentIndexRoute
  '/_authenticated/topup/': typeof AuthenticatedTopupIndexRoute
  '/_authenticated/transaction/': typeof AuthenticatedTransactionIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/akun'
    | '/listrik'
    | '/payment'
    | '/topup'
    | '/transaction'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/akun'
    | '/listrik'
    | '/payment'
    | '/topup'
    | '/transaction'
  id:
    | '__root__'
    | '/(auth)'
    | '/(blank)'
    | '/_authenticated'
    | '/_authenticated/'
    | '/(auth)/login/'
    | '/(auth)/register/'
    | '/(blank)/akun/'
    | '/_authenticated/listrik/'
    | '/_authenticated/payment/'
    | '/_authenticated/topup/'
    | '/_authenticated/transaction/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  blankRouteRoute: typeof blankRouteRouteWithChildren
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(blank)': {
      id: '/(blank)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof blankRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/transaction/': {
      id: '/_authenticated/transaction/'
      path: '/transaction'
      fullPath: '/transaction'
      preLoaderRoute: typeof AuthenticatedTransactionIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/topup/': {
      id: '/_authenticated/topup/'
      path: '/topup'
      fullPath: '/topup'
      preLoaderRoute: typeof AuthenticatedTopupIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/payment/': {
      id: '/_authenticated/payment/'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof AuthenticatedPaymentIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/listrik/': {
      id: '/_authenticated/listrik/'
      path: '/listrik'
      fullPath: '/listrik'
      preLoaderRoute: typeof AuthenticatedListrikIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(blank)/akun/': {
      id: '/(blank)/akun/'
      path: '/akun'
      fullPath: '/akun'
      preLoaderRoute: typeof blankAkunIndexRouteImport
      parentRoute: typeof blankRouteRoute
    }
    '/(auth)/register/': {
      id: '/(auth)/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authLoginIndexRoute: typeof authLoginIndexRoute
  authRegisterIndexRoute: typeof authRegisterIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginIndexRoute: authLoginIndexRoute,
  authRegisterIndexRoute: authRegisterIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface blankRouteRouteChildren {
  blankAkunIndexRoute: typeof blankAkunIndexRoute
}

const blankRouteRouteChildren: blankRouteRouteChildren = {
  blankAkunIndexRoute: blankAkunIndexRoute,
}

const blankRouteRouteWithChildren = blankRouteRoute._addFileChildren(
  blankRouteRouteChildren,
)

interface AuthenticatedRouteRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedListrikIndexRoute: typeof AuthenticatedListrikIndexRoute
  AuthenticatedPaymentIndexRoute: typeof AuthenticatedPaymentIndexRoute
  AuthenticatedTopupIndexRoute: typeof AuthenticatedTopupIndexRoute
  AuthenticatedTransactionIndexRoute: typeof AuthenticatedTransactionIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedListrikIndexRoute: AuthenticatedListrikIndexRoute,
  AuthenticatedPaymentIndexRoute: AuthenticatedPaymentIndexRoute,
  AuthenticatedTopupIndexRoute: AuthenticatedTopupIndexRoute,
  AuthenticatedTransactionIndexRoute: AuthenticatedTransactionIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  blankRouteRoute: blankRouteRouteWithChildren,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
